import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
import aiohttp
import matplotlib.pyplot as plt
from io import BytesIO
from aiogram.types import BufferedInputFile
from dotenv import load_dotenv
import os

load_dotenv()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CMC_API_KEY = os.getenv('CMC_API_KEY')
COINGECKO_API_KEY = os.getenv('COINGECKO_API_KEY')



# üîê –¢–≤–æ–∏ –∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = '8406350509:AAETYDxyUqJiamI3mUcFegns-726ioqf9ig'
CMC_API_KEY = '3ca58bdc-75fc-4df9-9767-16287f7d1201'

COINGECKO_API_KEY = "CG-CrGiNQVuiGemtqNUJFjhoP1F"

# ü§ñ –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ü–µ–Ω—ã
last_ton_price = None

# –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USD –∫ UZS
async def get_usd_to_uzs():
    url = 'https://open.er-api.com/v6/latest/USD'
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            print("–û—Ç–≤–µ—Ç –æ—Ç open.er-api.com:", data)  # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            try:
                return data['rates']['UZS']
            except Exception as e:
                print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD/UZS:', e)
                return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã TON (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
async def get_ton_price():
    url = 'https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest'
    params = {'symbol': 'TON', 'convert': 'USD'}
    headers = {'X-CMC_PRO_API_KEY': CMC_API_KEY}

    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params, headers=headers) as response:
            data = await response.json()
            try:
                price = data['data']['TON']['quote']['USD']['price']
                return round(price, 2)
            except Exception as e:
                print('–û—à–∏–±–∫–∞:', e)
                return None

# üì© –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! \n–ù–∞–ø–∏—à–∏ /ton —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É Toncoin (TON)\n/chart —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫. \n/ton_predict - –ø—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã")

# üí∞ –ö–æ–º–∞–Ω–¥–∞ /ton
@dp.message(Command("ton"))
async def ton_price(message: Message):
    price_usd = await get_ton_price()
    usd_to_uzs = await get_usd_to_uzs()
    if price_usd and usd_to_uzs:
        price_uzs = round(price_usd * usd_to_uzs, 0)
        await message.answer(
            f"üí∏ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ TON:\n"
            f"‚Ä¢ {price_usd}$\n"
            f"‚Ä¢ {price_uzs} —Å—É–º\n"
            
        )
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É TON –∏–ª–∏ –∫—É—Ä—Å USD/UZS. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /ton_predict
@dp.message(Command("ton_predict"))
async def ton_predict(message: Message):
    global last_ton_price
    current_price = await get_ton_price()
    if current_price is None:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É TON. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return

    if last_ton_price is None:
        last_ton_price = current_price
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return

    if current_price > last_ton_price:
        predicted = round(current_price * 1.01, 2)
        await message.answer(f"üìà –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —Ä–æ—Å—Ç! –ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–∫–æ–ª–æ ${predicted}")
    elif current_price < last_ton_price:
        predicted = round(current_price * 0.99, 2)
        await message.answer(f"üìâ –í–æ–∑–º–æ–∂–µ–Ω —Å–ø–∞–¥. –¶–µ–Ω–∞ –º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –¥–æ ${predicted}")
    else:
        predicted = current_price
        await message.answer(f"‚öñÔ∏è –¶–µ–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞. –ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ ${predicted}")

    last_ton_price = current_price  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É

@dp.message(Command("chart"))
@dp.message(Command("range"))
async def ton_range(message: Message):
    url = "https://api.coingecko.com/api/v3/coins/the-open-network/market_chart"
    params = {"vs_currency": "usd", "days": "1"}
    headers = {"x-cg-pro-api-key": COINGECKO_API_KEY}  # –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å

    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params, headers=headers) as response:
            if response.status != 200:
                error_text = await response.text()
                print(f"–û—à–∏–±–∫–∞ CoinGecko: {response.status} ‚Äî {error_text}")
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ TON.")
                return
            data = await response.json()

    prices = data.get("prices")
    if not prices:
        await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ TON.")
        return

    price_values = [point[1] for point in prices]
    ton_min = round(min(price_values), 2)
    ton_max = round(max(price_values), 2)

    await message.answer(
        f"üìä –î–∏–∞–ø–∞–∑–æ–Ω TON –∑–∞ 24 —á–∞—Å–∞:\n"
        f"üîª –ú–∏–Ω–∏–º—É–º: ${ton_min}\n"
        f"üî∫ –ú–∞–∫—Å–∏–º—É–º: ${ton_max}"
    )


# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

